{% extends "cpp/base.cpp.j2" %}

{% block header %}
#include <lean/lean.h>
#include <ginac/ginac.h>
#include "CppClass.h"
using namespace std;
using namespace GiNaC;

{% endblock %}

{% block content %}
{% for method in type.methods %}
{% if method.kind == "CONSTRUCTOR" %}
extern "C" LEAN_EXPORT lean_obj_res {{namespace}}_{{type.lean}}_{{method.lean}}({{list_sig_params_cpp(method.params)}}) {
    auto {{ret(method.return_type.cpp)}} = new {{type.cpp}}({{list_params_call_cpp(method.params)}});
    return of_cppClass({{ret(method.return_type.cpp)}});
}
{% endif %}
{% if method.kind == "CXX_METHOD" %}
extern "C" LEAN_EXPORT lean_obj_res {{namespace}}_{{type.lean}}_{{method.lean}}(b_lean_obj_arg _self{{maybe(", ", method.params)}}{{list_sig_params_cpp(method.params)}}) {
    auto self = to_cppClass<symbol>(_self);
    auto {{ret(method.return_type.cpp)}} = self->{{method.cpp}}({{list_params_call_cpp(method.params)}});
    return {{ method.return_type.to_lean|format(ret(method.return_type.cpp))}};
}
{% endif %}
{% endfor %}
{% endblock %}
